name: Continuous Integration and Delivery
on: [push]
jobs:
  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .env.prod
        run: |
          echo DEBUG=${{ secrets.DEBUG }} >> .env.prod
          echo DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" >> .env.prod
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env.prod
          echo DATABASE_ENGINE=django.db.backends.postgresql >> .env.prod
          echo DATABASE_NAME=${{ secrets.DATABASE_NAME }} >> .env.prod
          echo DATABASE_USER=${{ secrets.DATABASE_USER }} >> .env.prod
          echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} >> .env.prod
          echo DATABASE_HOST=${{ secrets.DATABASE_HOST }} >> .env.prod
          echo DATABASE_PORT=${{ secrets.DATABASE_PORT }} >> .env.prod
          echo ADMIN_PANEL_ENABLED=${{ secrets.ADMIN_PANEL_ENABLED }} >> .env.prod
          echo MAP_BOX_ACCESS_TOKEN=${{ secrets.MAP_BOX_ACCESS_TOKEN }} >> .env.prod
          echo MAINTENANCE_ENABLED=${{ secrets.MAINTENANCE_ENABLED }} >> .env.prod
          echo API_ENDPOINT=${{ secrets.API_ENDPOINT }} >> .env.prod
      - name: ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and Deploy
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env.prod root@${{ secrets.VPS_IP_ADDRESS }}:/opt/covid19tracker.info/covid-19-tracker
          ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_IP_ADDRESS }} << 'ENDSSH'
            cd /opt/covid19tracker.info/covid-19-tracker
            git pull origin main --force
            source ./venv/bin/activate
            pip3 install --upgrade pip
            pip3 install wheel
            pip3 install -r requirements.txt
            bash ./build/migrations.sh
            chmod +x ./deploy/start_gunicorn
            chmod u+x ./terminate.sh
            sudo service supervisor restart
            sudo nginx -t && sudo service nginx reload
          ENDSSH
